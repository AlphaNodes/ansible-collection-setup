# Example Gitaly configuration file
# Documentation lives at https://docs.gitlab.com/ee/administration/gitaly/ and
# ? https://docs.gitlab.com/ee/administration/gitaly/reference.html

socket_path = "{{ gitaly_socket_path }}"

# The directory where Gitaly's executables are stored
bin_dir = "{{ gitlab_gitaly_bin_path }}"

# # Optional: The directory where Gitaly can create all files required to
# # properly operate at runtime. If not set, Gitaly will create a directory in
# # the global temporary directory. This directory must exist.
# runtime_dir = "/home/git/gitaly/run"

# Optional: listen on a TCP socket. This is insecure (no authentication)
# listen_addr = "localhost:9999"
# tls_listen_addr = "localhost:8888"

# Optional: export metrics via Prometheus
# prometheus_listen_addr = "localhost:9236"

# Optional: configure where the Gitaly creates the sockets for internal connections. If unset, Gitaly will create a randomly
# named temp directory each time it boots.
# Non Gitaly clients should never connect to these sockets.
# !! this directory has to exist
#internal_socket_dir = "{{ gitaly_socket_dir }}/internal"

# # Optional: authenticate Gitaly requests using a shared secret
# [auth]
# token = 'abc123secret'
# transitioning = false # Set `transitioning` to true to temporarily allow unauthenticated while rolling out authentication.

# [tls]
# certificate_path = '/home/git/cert.cert'
# key_path = '/home/git/key.pem'

# # Git settings
[git]
bin_path = "{{ gitlab_git_bin }}"
# catfile_cache_size = 100
#
# # Set this setting to `true` to start ignoring gitconfig files installed in
# # the system. This includes both system-level (e.g. '/etc/gitconffig') and
# # global-level (e.g. `$HOME/.gitconfig`) files. This setting will become the
# # default with v16.0. If you intend to override Git configuration you can do
# # so via `[[git.config]]`. The default value is `false`.
# ignore_gitconfig = false
#
# [[git.config]]
# key = fetch.fsckObjects
# value = true

[[storage]]
name = "default"
path = "{{ gitlab_repositories_path }}"

# # You can optionally configure more storages for this Gitaly instance to serve up
#
# [[storage]]
# name = "other_storage"
# path = "/mnt/other_storage/repositories"

# # You can optionally configure Gitaly to output JSON-formatted log messages to stdout
[logging]
# # The directory where Gitaly stores extra log files
dir = "{{ gitlab_home }}/gitlab/log"
# format = "json"
# # Optional: Set log level to only log entries with that severity or above
# # One of, in order: debug, info, warn, errror, fatal, panic
# # Defaults to "info"
level = "{{ gitlab_gitaly_logging_level }}"

# # You can optionally configure Gitaly to record histogram latencies on GRPC method calls
# [prometheus]
# grpc_latency_buckets = [0.001, 0.005, 0.025, 0.1, 0.5, 1.0, 10.0, 30.0, 60.0, 300.0, 1500.0]

[gitlab-shell]
# The directory where gitlab-shell is installed
dir = "{{ gitlab_home }}/gitlab-shell"

[hooks]
custom_hooks_dir = "{{ gitlab_home }}/custom_hooks"

[gitlab]
secret_file = "{{ gitlab_home }}/gitlab-shell/.gitlab_shell_secret"
url = "{{ gitlab_http_unix_url }}"
# Only needed if a UNIX socket is used in `url` and GitLab is configured to
# use a relative path (e.g. /gitlab).
# relative_url_root = '/'

[gitlab.http-settings]
# read_timeout = 300
# user = someone
# password = somepass
# ca_file = /etc/ssl/cert.pem
# ca_path = /etc/pki/tls/certs
self_signed_cert = false

# # You can adjust the concurrency of each RPC endpoint
# [[concurrency]]
# rpc = "/gitaly.RepositoryService/GarbageCollect"
# max_per_repo = 1
# max_queue_wait = "1m"
# max_queue_size = 10

# [[rate_limiting]]
# rpc = "/gitaly.SmartHTTPService/PostUploadPackWithSidechannel"
# interval = "1m"
# burst = 5

# Daily maintenance designates time slots to run daily to optimize and maintain
# enabled storages.
# [daily_maintenance]
# start_hour = 23
# start_minute = 30
# duration = "45m"
# storages = ["default"]
# disabled = false

# [cgroups]
# count = 10
# mountpoint = "/sys/fs/cgroup"
# hierarchy_root = "gitaly"

# [cgroups.memory]
# enabled = true
# limit = 1048576

# [cgroups.cpu]
# enabled = true
# shares = 512
